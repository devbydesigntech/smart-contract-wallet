/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SmartContractWalletInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CONFIRMATIONS_REQUIRED"
      | "allowances"
      | "guardians"
      | "guardiansResetCount"
      | "hasVoted"
      | "nextOwner"
      | "owner"
      | "proposalDeadline"
      | "proposeNewOwner"
      | "setAllowance"
      | "setGuardian"
      | "transfer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CONFIRMATIONS_REQUIRED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "guardians",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "guardiansResetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "nextOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalDeadline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGuardian",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONFIRMATIONS_REQUIRED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guardians", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "guardiansResetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
}

export interface SmartContractWallet extends BaseContract {
  connect(runner?: ContractRunner | null): SmartContractWallet;
  waitForDeployment(): Promise<this>;

  interface: SmartContractWalletInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CONFIRMATIONS_REQUIRED: TypedContractMethod<[], [bigint], "view">;

  allowances: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, boolean] & { amount: bigint; isAllowed: boolean }],
    "view"
  >;

  guardians: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  guardiansResetCount: TypedContractMethod<[], [bigint], "view">;

  hasVoted: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  nextOwner: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proposalDeadline: TypedContractMethod<[], [bigint], "view">;

  proposeNewOwner: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  setAllowance: TypedContractMethod<
    [_for: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setGuardian: TypedContractMethod<
    [_guardian: AddressLike, _isGuardian: boolean],
    [void],
    "nonpayable"
  >;

  transfer: TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish, _payload: BytesLike],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CONFIRMATIONS_REQUIRED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowances"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, boolean] & { amount: bigint; isAllowed: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "guardians"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "guardiansResetCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposalDeadline"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposeNewOwner"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAllowance"
  ): TypedContractMethod<
    [_for: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGuardian"
  ): TypedContractMethod<
    [_guardian: AddressLike, _isGuardian: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish, _payload: BytesLike],
    [string],
    "nonpayable"
  >;

  filters: {};
}
